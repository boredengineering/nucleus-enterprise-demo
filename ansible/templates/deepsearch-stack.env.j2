################################################################################
## Docker Compose Project Name
################################################################################
# Important so there are no Orphans

COMPOSE_PROJECT_NAME = deepsearch-stack

################################################################################
## Intro
################################################################################
#
# This file contains the bulk of detail on configuring your
# DeepSearch/NGSearch stack, right next to configuration parameters
# described. It needs to be carefully studied in it's entirety to guarantee
# a working deployment.
#
# A lot of parameters available here can be left with their defaults, but
# some need explicit configuration. Please study the file carefully.
#
#
################################################################################
## End-User License Agreement (EULA)
################################################################################

# Uncomment to indicate your acceptance of EULA
# You can review EULA at: https://docs.omniverse.nvidia.com/eula
#
ACCEPT_EULA=1

################################################################################
## Security and implications of insecure configurations
################################################################################
#
# - Transport: if not configuring SSL, all traffic between your Clients
#   and this NGSearch instance will be plain text, potentially making
#   it visible to anyone on the network. 
#
#   To be flexible and lower the barrier for entry, we allow you to configure
#   this stack however you please, including not enforcing security. For example,
#   there are situations where an easy setup is preferable for quick tests.
#
#   Please review your security posture carefully, and uncomment the
#   following to indicate your understanding of security implications of
#   your deployment, however you have configured it.
#
SECURITY_REVIEWED=1

################################################################################
## Required endpoints configuration
################################################################################

# You MUST set SERVER_IP_OR_HOST.
#
# General caveats and gotchas:
# ----------------------------
#
#   * DO NOT use 127.0.0.1
#
#   * DO NOT use any IP from the reserved loopback range (127.0.0.0/8)
#
#   * If using hostname, make sure it does NOT resolve to a
#     loopback IP
#
#   * If using hostname, make sure it correctly resolves from ALL
#     intended clients of this server.
#
#
# For basic deployments without SSL, set this to (preferably) a hostname or
# an IP address of the server that will be used by users to access it,
# and use ngsearch-stack-no-ssl.yml to stand up your stack.
#     ----------------------------
#
# If setting up an SSL stack, SERVER_IP_OR_HOST will serve as an internal
# (port-based) endpoint and must be valid for all internal clients of NGSearch,
# including NGSearch itself and your Ingress Router.
#
# Note that Ingress Router to terminate SSL is not provided with this stack.
# It is required for SSL. Configuring and deploying this stack with SSL
# will enable it to be served over SSL via an Ingress Router, but will not
# stand up the Router itself. You will have to configure it separately.

# See more documentation on the topic of SSL at
# https://docs.omniverse.nvidia.com/nucleus/ssl.

# For SSL deployments, use ngsearch-stack-ssl.yml to stand up your stack.
#                      -------------------------

SERVER_IP_OR_HOST={{ server_ip_or_host }}

# SSL Ingress hostname. Ignore if not using SSL. If using SSL, set this to 
# hostname and port of your Ingress Router. Note that hostname must be
# the same one as used in the SSL cert of the Ingress Router.
# SSL_INGRESS_HOST=my-ssl-nucleus-my-company.com
SSL_INGRESS_HOST={{ domain }}
SSL_INGRESS_PORT=443


################################################################################
## Name your instance
################################################################################

# Instance name
# INSTANCE_NAME=my_omniverse
# INSTANCE_NAME=Deepsearch-Server
INSTANCE_NAME={{ instance_name }}

################################################################################
## Nucleus Base Stack Location	
################################################################################

# NGSearch is provided as a separate stack and can either run on the same 
# machine as the Base Nucleus stack or on a different one. In order for NGSearch
# service to be able to connect to the Nucleus server please provide the 
# (preferably) hostname or the IP of the server, where Nucleus Base Stack is 
# running. 
#
# In case your Nucleus stack is configured with SSL this should be the internal, 
# port-based, endpoint.

BASE_STACK_IP_OR_HOST={{ base_stack_ip_or_host }}

################################################################################
## Required passwords configuration
################################################################################

# !!!!!!!!!!!!!
# !! WARNING !!
# !!!!!!!!!!!!!
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!! REVIEW AND UNDERSTAND EVERY VALUE BELOW !!!
# !!! EXPOSURE OF ANY ONE OF THEM CAN LEAD    !!!
# !!! TO YOUR AUTHENTICATION SETUP            !!!
# !!! BEING COMPROMISED                       !!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#
# NGSearch stack requires creating a service account that allows it to access 
# data in Nucleus. Contact your Nucleus administrator for creating such an 
# account and make sure this account has admin access, such that NGSearch 
# services can access updates and content stored in Nucleus. 
# Master superuser ('omniverse') 
SERVICE_USERNAME=omniverse
SERVICE_PASSWORD=123456

################################################################################
## Required secrets
################################################################################

# !!!!!!!!!!!!!
# !! WARNING !!
# !!!!!!!!!!!!!
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!! REVIEW AND UNDERSTAND EVERY VALUE BELOW !!!
# !!! EXPOSURE OF ANY ONE OF THEM CAN LEAD    !!!
# !!! TO YOUR AUTHENTICATION SETUP            !!!
# !!! BEING COMPROMISED                       !!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
#
# ALL of the below secrets are required, and values provided
# are not DEFAULTS.
#
# Nucleus's auth root of trust public (AUTH_ROOT_OF_TRUST_PUB setting)
#

# AUTH_ROOT_OF_TRUST_PUB=./secrets/auth_root_of_trust.pub
AUTH_ROOT_OF_TRUST_PUB= {{ auth_root_of_trust_pub }}

# Nucleus's Discovery Registration Token (DISCOVERY_REGISTRATION_TOKEN setting)

# DISCOVERY_REGISTRATION_TOKEN=./secrets/svc_reg_token
DISCOVERY_REGISTRATION_TOKEN= {{ discovery_registration_token }}

################################################################################
## Search Backend Settings
################################################################################
#
# NGSearch requires Elastic Search or OpenSearch installation in order to store
# indexed Nucleus metadata and tags. Please install Elastic Search or OpenSearch
# on your cluster using this official guide:
# 
# https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html
#
#
# If you are using Elastic Search, additionally to the main installation please
# install the elastiknn plugin on all the nodes where Elastic Search is running.
# Please follow: https://elastiknn.com/installation
#
# After Elastic Search or OpenSearch cluster is prepared, modify the lines below 
# and update the correct cluster HOST, PORT and SCHEMA.
#
# Depending on which backend type you use, set the variable `SEARCH_BACKEND_TYPE`
# accordingly:
#
# Elastic Search:    `SEARCH_BACKEND_TYPE=es_index`
# OpenSearch:        `SEARCH_BACKEND_TYPE=os_index`
#
# For a quick !>TEST<! installation we have included a pre-configured
# single-node sample installation version of Open Search, however it
# >!SHOULD NOT!< be relied upon for production-grade installations. 
#
# Leaving the following configuration parameters as default will 
# automatically connect NGSearch services to the test OpenSearch Search 
# installation that is deployed in parallel to the stack.
#
# Search backend service:

# SEARCH_BACKEND_TYPE=os_index
SEARCH_BACKEND_TYPE= {{ search_backend_type }}

# SEARCH_BACKEND_HOST=open-search
SEARCH_BACKEND_HOST= {{ search_backend_host }}

SEARCH_BACKEND_PORT=9200
SEARCH_BACKEND_SCHEMA=http

# When the NGSearch service is connected to the Elastic Search or OpenSearch
# instance for the  first time it creates indexes, where the data from the
# Nucleus server will be stored. On creation time there is a possibility to
# influence the number of shards into which the data will be split by setting
# the parameter below. By default the number of shards is 10. When modifying
# this parameter note that:
# 
#     * search is executed on all shards in parallel, so increasing the 
#       number of shards may bring some speed improvements
#     * !>NOTE<! as soon as the index is created changing this parameter will
#       have no effect, so in order to modify the number of shards in that 
#       case reindexing of the data will be required.

SEARCH_BACKEND_NUMBER_OF_SHARDS=10

# The vairables below can be used for authentication to the Elastic Search 
# cluster. Please refer to 
# https://www.elastic.co/guide/en/elasticsearch/reference/current/setting-up-authentication.html 
# for more information about different authentication possibilities within 
# Elastic Search. If any of the parameters below are not required for the 
# chosen authentication method, they can be left unchanged. When using the 
# test installation, authentication is not required, as Elastic Search endpoint 
# is not exposed anywhere outside the container network that is used only by 
# NGSearch stack for internal communication. Therefore, when using the test 
# installation these parameters can be left unchanged. 

SEARCH_BACKEND_USERNAME=
SEARCH_BACKEND_PASSWORD=
SEARCH_BACKEND_CLOUD_ID=
SEARCH_BACKEND_BEARER_AUTH=
SEARCH_BACKEND_OPAQUE_ID=
SEARCH_BACKEND_API_KEY=
SEARCH_BACKEND_HOSTS=

################################################################################
## Data
################################################################################

# Set this variable to where you want NGSearch Data to be. Make sure the 
# right kind of disk and adequate amount of disk space is available.
#
# It will contain the actual data, as well as logs. File and directory names
# should be self-explanatory.
#
NGSEARCH_DATA_ROOT=/var/lib/omni/ngsearch-data/

################################################################################
## Ports, network settings
################################################################################

# NGSearch Service Port:
NGSEARCH_PORT=3503

# NGSearch Storage Service Port:
NGSEARCH_STORAGE_PORT=3703

# Prometheus Metrics
INDEXING_METRICS_PORT=8001
TAGGING_METRICS_PORT=8002
STORAGE_METRICS_PORT=8007
NGSEARCH_METRICS_PORT=8008

# Default "internal" network for containers.
# Modify this if it conflicts with your environment.
CONTAINER_SUBNET=192.168.2.196/26


################################################################################
## Search telemetry
################################################################################

# NGSearch service has the possibility to gather telemetry information about 
# searches executed by the users of the system. This information can
# then be used to understand what queries are most frequently executed and also
# allow to track down issues, if some incosistency appears in the search
# results. 
#
# Telemetry information includes:
#
#  * Overall duration of request processing
#
#  * Time spent waiting for response from Elastic Search service
# 
#  * Parsed version of the input query that is then converted to a request to
#    Elastic Search service
#
# Note that no information about the user is stored in the system.
#
# This telemetry is stored in the data directory of NGSearch in an SQLite
# database format and is !>NOT<! sent anywhere outside of the service.
#
# By default telemetry logging is switched off. If you wish to enable
# it, set the parameter below to 1

USE_SEARCH_TELEMETRY=0

# If Telemetry logging is enabled, there is additional possibility to log 
# telemetry information to stdout as structured logs, which can then accumulated 
# in a database for analysis. In order to enable this functionality, set the 
# following parameter to 1.

SEARCH_TELEMETRY_STDOUT=0


################################################################################
## Search configuration parameters
################################################################################

# Number of search results that are returned by the NGSearch Search Service by
# default. This value can be overriden from the input search query using the 
# "max" prefix.

DEFAULT_SEARCH_SIZE=64

################################################################################
## Registry for containers
################################################################################

# Registry root URL
REGISTRY=nvcr.io/nvidia/omniverse

################################################################################
## Internal - do not change!
################################################################################

NGSEARCH_VERSION=2.1.1



################################################################################
## DeepSearch services config
################################################################################

################################################################################
## DeepSearch services data
################################################################################

# Set this variable to where you want DeepSearch data to be.
#
# Make sure the right kind of disk and adequate amount of disk space is
# available.
#
# It will contain actual data, as well as logs. Dir and file names created
# under this root should be self-explanatory.

DEEPSEARCH_DATA_ROOT=/var/lib/omni/deepsearch-data/


################################################################################
## Ports, network settings
################################################################################

# Embedding Service Port:
EMBEDDING_SERVICE_PORT=3603

# Inference API Service Port:
MONITOR_API_PORT=3504

# Websocket endpoint for receiving data coming from Omniverse Farm
FARM_CLIENT_WS_PORT=8765
# HTTP endpoint of the cache service
MONITOR_CACHE_PORT=8778

# Prometheus Metrics
DEEPSEARCH_CACHE_METRICS_PORT=8010
DEEPSEARCH_FARM_WORKER_METRICS_PORT=8011
DEEPSEARCH_NON_FARM_WORKER_METRICS_PORT=8012
DEEPSEARCH_OMNI_WRITER_METRICS_PORT=8013
DEEPSEARCH_MONITOR_METRICS_PORT=8014
DEEPSEARCH_MODEL_UPDATER_METRICS_PORT=8015
DEEPSEARCH_EMBEDDING_METRICS_PORT=8016

# Default "internal" network for containers.
# Modify this if it conflicts with your environment.
CONTAINER_SUBNET=192.168.2.128/26


################################################################################
## Omniverse Farm connection
################################################################################

# In order to be able to render USD assets, DeepSearch relies on Omniverse Farm.
# Please refer to Omniverse Farm Documentation on how to configure a
# Farm instance.
#
# !>Note<! that DeepSearch requires a specific job type to be available on the
# Omniverse Farm Agent instance, so Farm agents of version 103.1.2 or higher
# are required.
#
# After configuration is completed, you need to provide the HOST name and PORT
# for the Omniverse Farm Queue by modifying the respective variables below.

# OMNI_FARM_HOST=my-omniverse-farm.my-company.com
OMNI_FARM_HOST={{ omni_farm_host }}

OMNI_FARM_PORT=8222

OMNI_FARM_SCHEMA=http

# When using Farm Agent version 103.5 or higher, there is a possibility to rely
# on DeepSearch monitor cache service to receive data from Farm agents. This
# improves scalability and speed of data transfer. In order to activate this
# feature please set the following variable to ``1``
#
# Note: This feature becomes available only with Farm agents of version 103.5
# and higher previous agents will not have this support and activating the
# following parameter will end-up in a broken state.

OMNI_FARM_USE_CACHE_SERVER=0

# When interacting with Omniverse Farm, DeepSearch Farm worker caches
# rendered images locally to improve speed. Depending on the number of parallel
# threads that are communicating with the Farm Queue the size of cache may
# vary. By default, it is set to 30 GB, but can be increased if needed.
#
# **Note**: Setting the value of this variable too low may have implications
# on the rendering speed.

FARM_WORKER_DISK_CACHE_SIZE_LIMIT=32212254720 # bytes

################################################################################
## Additional configuration parameters
################################################################################

# Projection service can spawn multiple workers to process projection requests 
# faster. Note that increasing this variable will affect the resource usage 
# on the host system (mostly CPU and RAM).

N_PROJECTION_WORKERS=1

################################################################################
## Additional configuration parameters
################################################################################

# The embedding service spawns a pool of workers to process inference requests.
# You can control the number of workers by setting the variable below. By
# default, four worker processes are created. Note that increasing
# this variable will affect the resource usage on the host system
# (mostly CPU and RAM) but will also make processing faster.

N_INFERENCE_WORKERS=2

# DeepSearch cache service is an WSGI HTTP Server that servers as a communication
# layer between all the individual components on the stack. If also has the
# possibility to receive data from Omniverse Farm Agents (when an Agent version
# 103.5 or higher is used). Cache service stores data on disk, over time the 
# utilization of disk  space may grow. There is a limit of how much space 
# can be occupied on disk, which is controlled by the following parameter 
# file, which is set to 30 Gb by default.

CACHE_SERVICE_DISK_CACHE_SIZE_LIMIT=32212254720 # bytes

################################################################################
## Plugin configuration
################################################################################

# DeepSearch service is built as a collection of plugins, each of which does a
# specific job. These plugins can be optionally activated and deactivated by
# modifying the plugin.config.yaml file, which is distributed together with
# DeepSearch stack. By default it is configured such that the following plugins
# are active:
#
# * thumbnail_generation - generation of thumbnails for the USD assets in
#   Nucleus
#
# * thumbnail_to_embedding - extraction of CLIP embeddings from thumbnails of
#   files found in Nucleus
#
# * rendering_to_embedding_ds2 - rendering USD assets from multiple views and
#   extraction of CLIP embeddings from each view to better characterize the
#   asset

PLUGIN_CONFIG=./plugin.config.yaml

################################################################################
## Internal - do not change!
################################################################################

DEEPSEARCH_VERSION=2.1.1
DEEPSEARCH_PROJECTIONS_SERVICE_VERSION=1.0.1